#Simuler selon exp(theta)
simul_exp <- function(n,theta) {
u = runif(n)
x = -log(u)/theta
return(x)
}
#hist(x,breaks=seq(min(x),max(x)+sd(x)/5,by=sd(x)/5))
n = 10^5
hist(simulexpo(n,1),prob=T,col="black",border="white",
xlab="Valeurs de l'exponentielle",
main="loi exp generee par la methode du rejet")
lines(seq(0,max(expo),0.01),theta*exp(-theta*seq(0,max(expo),0.01)),col="red",lwd=4)
#Simuler selon exp(theta)
simul_exp <- function(n,theta) {
u = runif(n)
x = -log(u)/theta
return(x)
}
#hist(x,breaks=seq(min(x),max(x)+sd(x)/5,by=sd(x)/5))
n = 10^5
hist(simul_exp(n,1),prob=T,col="black",border="white",
xlab="Valeurs de l'exponentielle",
main="loi exp generee par la methode du rejet")
lines(seq(0,max(expo),0.01),theta*exp(-theta*seq(0,max(expo),0.01)),col="red",lwd=4)
#hist(x,breaks=seq(min(x),max(x)+sd(x)/5,by=sd(x)/5))
n = 10^5
x = simul_exp(n,1)
hist(x,prob=T,col="black",border="white",
xlab="Valeurs de l'exponentielle",
main="loi exp generee par la methode du rejet")
lines(seq(0,max(x),0.01),theta*exp(-theta*seq(0,max(x),0.01)),col="red",lwd=4)
n = 10^5
theta = 1
x = simul_exp(n,theta)
hist(x,prob=T,col="black",border="white",
xlab="Valeurs de l'exponentielle",
main="loi exp generee par la methode du rejet")
lines(seq(0,max(x),0.01),theta*exp(-theta*seq(0,max(x),0.01)),col="red",lwd=4)
n = 10^5
theta = 1
x = simul_exp(n,theta)
hist(x,prob=T,col="black",border="white",
breaks=seq(min(x),max(x)+sd(x)/5,by=sd(x)/5),
xlab="Valeurs de l'exponentielle",
main="loi exp generee par la methode du rejet")
lines(seq(0,max(x),0.01),theta*exp(-theta*seq(0,max(x),0.01)),col="red",lwd=4)
#### Application - loi geometrique ###############
simulgeom <-function(n,p){
theta = -log(1-p)
x <- simul_exp(n,theta)
y <- floor(x)+1
return(y)
}
y <-simulgeom(n,0.5)
hist(y[y<10], breaks = 1:10,prob=T)
x <-simulgeom(n,0.5)
hist(x[x<10], breaks = 1:10,prob=T)
#add true value of the geometric variable (dgeom(k,0.5))
hist(x,breaks=seq(min(x),max(x)+sd(x)/5,by=sd(x)/5))
#Simuler selon laplace
simul_laplace <- function(n) {
u = runif(n)
x = log(2*u)*(u<0.5)-log(2*(1-u))*(u>=0.5)
return(x)
}
x=simullaplace(n)
hist(x,breaks=seq(min(x),max(x)+sd(x)/5,by=sd(x)/5))
#Simuler selon laplace
simul_laplace <- function(n) {
u = runif(n)
x = log(2*u)*(u<0.5)-log(2*(1-u))*(u>=0.5)
return(x)
}
x=simul_laplace(n)
hist(x,breaks=seq(min(x),max(x)+sd(x)/5,by=sd(x)/5))
x=simul_laplace(n)
hist(x,prob=T,col="black",border="white",
breaks=seq(min(x),max(x)+sd(x)/5,by=sd(x)/5), #?
xlab="Valeurs de la loi de Laplace",
main="loi de Laplace par la methode du rejet")
lines(seq(0,max(x),0.01),0.5*exp(-abs(seq(0,max(x),0.01))),col="red",lwd=4)
x=simul_laplace(n)
hist(x,prob=T,col="black",border="white",
breaks=seq(min(x),max(x)+sd(x)/5,by=sd(x)/5), #?
xlab="Valeurs de la loi de Laplace",
main="loi de Laplace par la methode du rejet")
lines(seq(min(x),max(x),0.01),0.5*exp(-abs(seq(0,max(x),0.01))),col="red",lwd=4)
x=simul_laplace(n)
hist(x,prob=T,col="black",border="white",
breaks=seq(min(x),max(x)+sd(x)/5,by=sd(x)/5), #?
xlab="Valeurs de la loi de Laplace",
main="loi de Laplace par la methode du rejet")
lines(seq(min(x),max(x),0.01),0.5*exp(-abs(seq(min(x),max(x),0.01))),col="red",lwd=4)
1>exp(-0.5*(abs(0)-1)^2)
simul_norm=function(n){
x=rep(NA,n)
for(i in 1:n){
u=1;y=0
while(u>exp(-0.5*(abs(y)-1)^2)){
y=simul_laplace(1);u=runif(1)
}
x[i]=y
}
return(x)
}
x=simul_norm(N)
hist(x,breaks=seq(min(x),max(x)+sd(x)/5,by=sd(x)/5))
simul_norm=function(n){
x=rep(NA,n)
for(i in 1:n){
u=1;y=0
while(u>exp(-0.5*(abs(y)-1)^2)){
y=simul_laplace(1);u=runif(1)
}
x[i]=y
}
return(x)
}
x=simul_norm(n)
hist(x,breaks=seq(min(x),max(x)+sd(x)/5,by=sd(x)/5))
x=simul_norm(n)
hist(x,prob=T,col="black",border="white",
breaks=seq(min(x),max(x)+sd(x)/5,by=sd(x)/5), #?
xlab="Valeurs de la loi normale (0,1)",
main="Loi normale (0,1) generee par la methode d'acceptation/rejet")
lines(seq(min(x),max(x),0.01),1/sqrt(2*pi)*exp(-0.5*seq(min(x),max(x),0.01)^2),col="red",lwd=4)
#Simuler selon loi Normale (Acceptation rejet)
simul_norm=function(n){
count_trial = 0
count_trial_passed = 0
x=rep(NA,n)
for(i in 1:n){
u=1;y=0
while(u>exp(-0.5*(abs(y)-1)^2)){
count_trial = count_trial + 1
y=simul_laplace(1);u=runif(1)
}
count_trial_passed = count_trial_passed + 1
x[i]=y
}
print(c("Proba d'acceptation", count_trial_passed/count_trial))
return(x)
}
x=simul_norm(n)
simul_normal2 <- function(n) {
return(matrix(rnorm(2*n),nrow=n,ncol=2))
}
simul_normal2(6)
t <-simul_normal2(6)
t[,1]*t[,2]
simul_normal2 <- function(n) {
return(matrix(rnorm(2*n),nrow=n,ncol=2))
}
estimation_MC <- function(n,c) {
x = simul_normal2(n)
y = abs(x[,1]*x[,2])
return(length(y<=c)/n)
}
estimation_MC(1000,3)
estimation_MC(1000,2)
estimation_MC(1000,1)
estimation_MC(1000,0.5)
estimation_MC(1000,0..2)
estimation_MC(1000,0.02)
estimation_MC <- function(n,c) {
x = simul_normal2(n)
y = abs(x[,1]*x[,2])<c
return(mean(y))
}
estimation_MC(1000,0.02)
estimation_MC(1000,0.5)
estimation_MC(1000,3)
simul_normal2 <- function(n) {
return(matrix(rnorm(2*n),nrow=n,ncol=2))
}
estimation_MC <- function(n,c) {
x = simul_normal2(n)
y = abs(x[,1]*x[,2])<c
return(list(mean=mean(y),sd=sd(y))
}
### Deuxieme Td Monte Carlo - 23/04
simul_normal2 <- function(n) {
return(matrix(rnorm(2*n),nrow=n,ncol=2))
}
estimation_MC <- function(n,c) {
x = simul_normal2(n)
y = abs(x[,1]*x[,2])<c
return(list(mean=mean(y),sd=sd(y)))
}
estimation_MC(1000,3)
estimation_MC <- function(n,c) {
x = simul_normal2(n)
y = abs(x[,1]*x[,2])<c
return(list(mean=mean(y),sd=sd(y)))
}
estimation_M(10^15,0.5)
estimation_MC(10^15,0.5)
estimation_MC(10^5,0.5)
estimation_MC(10^5,0.0001)
estimation_MC(10^5,0.0001)
estimation_MC(10^5,0.000001)
estimation_MC(10^5,0.5)
estimation_MC(10^5,0.5)
n = 10^5
a = estimation_MC(n,0.5)
a$mean + 1.96 * a$sd/sqrt(n)
a$mean - 1.96 * a$sd/sqrt(n)
estimation_MC <- function(n,c) {
x = simul_normal2(n)
y = abs(x[,1]*x[,2])<c
#plot ( x [ y , 1 ] , x [ y , 2 ] , c o l = ”bl u e ” , pch = ” . ”)
return(list(mean=mean(y),sd=sd(y),IC=c(mean(y) - 1.96 * (y)/sqrt(n),mean(y) + 1.96 * (y)/sqrt(n))))
}
n = 10^5
estimation_MC(n,0.5)
estimation_MC <- function(n,c) {
x = simul_normal2(n)
y = abs(x[,1]*x[,2])<c
#plot ( x [ y , 1 ] , x [ y , 2 ] , c o l = ”bl u e ” , pch = ” . ”)
return(list(mean=mean(y),sd=sd(y),IC=c(mean(y) - 1.96 *sd(y)/sqrt(n),mean(y) + 1.96 * sd(y)/sqrt(n))))
}
n = 10^5
estimation_MC(n,0.5)
estimation_MC <- function(n,c) {
x = simul_normal2(n)
y = abs(x[,1]*x[,2])<c
#plot ( x [ y , 1 ] , x [ y , 2 ] , c o l = ”bl u e ” , pch = ” . ”)
return(list(mean=mean(y),sd=sd(y),IC=c(mean(y) - 1.96 *sd(y)/sqrt(n),mean(y) + 1.96 * sd(y)/sqrt(n))))
}
n = 10^5
estimation_MC(n,0.5)
estimation_MC <- function(n,c) {
x = simul_normal2(n)
y = abs(x[,1]*x[,2])<c
#plot ( x [ y , 1 ] , x [ y , 2 ] , c o l = ”bl u e ” , pch = ” . ”)
return(list(mean=mean(y),sd=sd(y),IC=c(mean(y) - 1.96 *sd(y)/sqrt(n),mean(y) + 1.96 * sd(y)/sqrt(n))))
}
n = 10^5
estimation_MC(n,0.5)
estimation_MC <- function(n,c) {
x = simul_normal2(n)
y = abs(x[,1]*x[,2])<c
plot( x[ y , 1 ] , x[ y , 2 ] , col = 'blue' , pch = '.')
points( x[!y , 1 ] , x[!y , 2 ] , col = 'red' , pch = ',')
return(list(mean=mean(y),sd=sd(y),IC=c(mean(y) - 1.96 *sd(y)/sqrt(n),mean(y) + 1.96 * sd(y)/sqrt(n))))
}
n = 10^5
estimation_MC(n,0.5)
estimation_MC <- function(n,c) {
x = simul_normal2(n)
y = abs(x[,1]*x[,2])<c
plot( x[ y , 1 ] , x[ y , 2 ] , col = 'blue' , pch = '.')
points( x[!y , 1 ] , x[!y , 2 ] , col = 'red' , pch = ',')
return(list(mean=mean(y),sd=sd(y),IC=c(mean(y) - 1.96 *sd(y)/sqrt(n),mean(y) + 1.96 * sd(y)/sqrt(n))))
}
n = 10^2
estimation_MC(n,0.5)
estimation_MC <- function(n,c) {
x = simul_normal2(n)
y = abs(x[,1]*x[,2])<c
plot( x[ y , 1 ] , x[ y , 2 ] , col = 'blue' , pch = '.')
points( x[!y , 1 ] , x[!y , 2 ] , col = 'red' , pch = ',')
return(list(mean=mean(y),sd=sd(y),IC=c(mean(y) - 1.96 *sd(y)/sqrt(n),mean(y) + 1.96 * sd(y)/sqrt(n))))
}
n = 10^2
estimation_MC(n,0.5)
estimation_MC <- function(n,c) {
x = simul_normal2(n)
y = abs(x[,1]*x[,2])<c
plot( x[ y , 1 ] , x[ y , 2 ] , col = 'blue' , pch = '.')
points( x[!y , 1 ] , x[!y , 2 ] , col = 'red' , pch = ',')
return(list(mean=mean(y),sd=sd(y),IC=c(mean(y) - 1.96 *sd(y)/sqrt(n),mean(y) + 1.96 * sd(y)/sqrt(n))))
}
n = 10^3
estimation_MC(n,0.5)
simul_normal2 <- function(n) {
return(matrix(rnorm(2*n),nrow=n,ncol=2))
}
estimation_MC <- function(n,c) {
x = simul_normal2(n)
y = abs(x[,1]*x[,2])<c
plot( x[ y , 1 ] , x[ y , 2 ] , col = 'blue' , pch = '.')
points( x[!y , 1 ] , x[!y , 2 ] , col = 'red' , pch = ',')
return(list(mean=mean(y),sd=sd(y),IC=c(mean(y) - 1.96 *sd(y)/sqrt(n),mean(y) + 1.96 * sd(y)/sqrt(n))))
}
n = 10^4
estimation_MC(n,0.5)
estimation_cv <- function(n,c) {
x = simul_normal2(n)
z = abs(x[,1]*x[,2])
y = abs(x[,1]*x[,2])<c
beta = -cov(y,z)/var(z)
w = y + beta*(z - 2/pi)
return(list(mean=mean(y),sd=sd(y),IC=c(mean(y) - 1.96 *sd(y)/sqrt(n),mean(y) + 1.96 * sd(y)/sqrt(n))))
}
n = 10^4
estimation_cv(n,0.5)
estimate_sd <- function(N,n,c) {
x = rep(estimation_cv(n,c),N)
return(x)
}
estimate_sd(100,10000,0.5)
estimate_sd <- function(N,n,c) {
x = rep(estimation_cv(n,c)$mean,N)
return(x)
}
estimate_sd(100,10000,0.5)
estimate_sd <- function(N,n,c) {
x = rep(NA,N)
for (i in 1:n) {x[i] = estimation_cv(n,c)$mean }
return(x)
}
estimate_sd(100,10000,0.5)
estimate_sd <- function(N,n,c) {
MC = rep(NA,N)
CV = rep(NA,N)
for (i in 1:n) {MC[i] = estimation_MC(n,c)$mean }
for (i in 1:n) {CV[i] = estimation_cv(n,c)$mean }
return(list(MC = sd(MC), CV = sd(CV)))
}
estimate_sd(100,10000,0.5)
estimation_MC <- function(n,c, plot=F) {
x = simul_normal2(n)
y = abs(x[,1]*x[,2])<c
if (plot=T) {
plot( x[ y , 1 ] , x[ y , 2 ] , col = 'blue' , pch = '.')
points( x[!y , 1 ] , x[!y , 2 ] , col = 'red' , pch = ',')}
return(list(mean=mean(y),sd=sd(y),IC=c(mean(y) - 1.96 *sd(y)/sqrt(n),mean(y) + 1.96 * sd(y)/sqrt(n))))
}
n = 10^4
estimation_MC(n,0.5) #attention la standard deviation n'est pas la variance de notre estimateur
estimation_MC <- function(n,c, plot=F) {
x = simul_normal2(n)
y = abs(x[,1]*x[,2])<c
if (plot==T) {
plot( x[ y , 1 ] , x[ y , 2 ] , col = 'blue' , pch = '.')
points( x[!y , 1 ] , x[!y , 2 ] , col = 'red' , pch = ',')}
return(list(mean=mean(y),sd=sd(y),IC=c(mean(y) - 1.96 *sd(y)/sqrt(n),mean(y) + 1.96 * sd(y)/sqrt(n))))
}
n = 10^4
estimation_MC(n,0.5)
estimate_sd <- function(N,n,c) {
MC = rep(NA,N)
CV = rep(NA,N)
for (i in 1:n) {MC[i] = estimation_MC(n,c)$mean }
for (i in 1:n) {CV[i] = estimation_cv(n,c)$mean }
return(list(MC = sd(MC), CV = sd(CV)))
}
estimate_sd(100,10000,0.5)
estimate_sd <- function(N,n,c) {
MC = rep(NA,N)
CV = rep(NA,N)
for (i in 1:N) {MC[i] = estimation_MC(n,c)$mean }
for (i in 1:N) {CV[i] = estimation_cv(n,c)$mean }
return(list(MC = sd(MC), CV = sd(CV)))
}
estimate_sd(100,10000,0.5)
estimate_sd(1000,1000,0.5)
estimate_sd <- function(N,n,c) {
MC = rep(NA,N)
CV = rep(NA,N)
for (i in 1:N) {MC[i] = estimation_MC(n,c)$mean }
for (i in 1:N) {CV[i] = estimation_cv(n,c)$mean }
return(list(MC = sd(MC), CV = sd(CV)))
}
estimate_sd(1000,1000,0.5)
estimation_cv <- function(n,c) {
x = simul_normal2(n)
z = abs(x[,1]*x[,2]) - 2/pi
y = abs(x[,1]*x[,2])<c
beta = -cov(y,z)/var(z)
w = y + beta*z
return(list(mean=mean(y),sd=sd(y),IC=c(mean(y) - 1.96 *sd(y)/sqrt(n),mean(y) + 1.96 * sd(y)/sqrt(n))))
}
n = 10^4
estimation_cv(n,0.5)
estimation_cv <- function(n,c) {
x = simul_normal2(n)
z = abs(x[,1]*x[,2]) - 2/pi
y = abs(x[,1]*x[,2])<c
beta = -cov(y,z)/var(z)
w = y + beta*z
return(list(mean=mean(w),sd=sd(y),IC=c(mean(y) - 1.96 *sd(y)/sqrt(n),mean(y) + 1.96 * sd(y)/sqrt(n))))
}
estimate_sd <- function(N,n,c) {
MC = rep(NA,N)
CV = rep(NA,N)
for (i in 1:N) {MC[i] = estimation_MC(n,c)$mean }
for (i in 1:N) {CV[i] = estimation_cv(n,c)$mean }
return(list(MC = sd(MC), CV = sd(CV)))
}
estimate_sd(1000,1000,0.5)
estimate_sd <- function(N,n,c) {
MC = rep(NA,N)
CV = rep(NA,N)
for (i in 1:N) {MC[i] = estimation_MC(n,c)$mean }
for (i in 1:N) {CV[i] = estimation_cv(n,c)$mean }
return(list(MC = sd(MC), CV = sd(CV)))
}
estimate_sd(1000,1000,0.5)
